using R2API;
using RoR2;
using UnityEngine;
using System.Collections.Generic;
using BepInEx.Configuration;
using RoR2.Skills;
using System;
using System.Text;
using UnityEngine.AddressableAssets;

namespace AlternatePods
{
    public class CommandoDraftMain
    {
        public static GameObject bodyPrefab;
        public static GenericSkill passiveSlot;
        public static SkillFamily skillFamily;
        public static GameObject paintjobPod;
        public static string TokenPrefix = "PODMOD_SHARED_PAINTJOB";

        public static void Init(ConfigFile config)
        {
            SetupConfig(config);
            bodyPrefab = RoR2Content.Survivors.Commando.bodyPrefab;
            CreatePassiveSlot();
            paintjobPod = CreatePaintJobPod();
            

            AddPods();
        }

        public static void GetMeshComponents(GameObject podPrefabInstance, out MeshFilter meshFilter, out MeshRenderer meshRenderer)
        {
            if (!podPrefabInstance)
            {
                AlternatePodsPlugin._logger.LogError("A pod was requested to be created, but its prefab is null!");
                meshFilter = null;
                meshRenderer = null;
                return;
            }
            var podObj = podPrefabInstance.transform.Find("Base/mdlEscapePod/EscapePodArmature/EscapePodMesh");
            meshFilter = podObj.GetComponent<MeshFilter>();
            meshRenderer = podObj.GetComponent<MeshRenderer>();
        }

        public static GameObject CreatePaintJobPod()
        {
            var pod = PrefabAPI.InstantiateClone(AlternatePodsPlugin.genericPodPrefab, TokenPrefix);
            //var childLoc = pod.transform.Find("Base/mdlEscapePod").GetComponent<ChildLocator>();
            GetMeshComponents(pod,
             out MeshFilter meshFilter,
             out MeshRenderer meshRenderer);
            //var commandoBody = Addressables.LoadAssetAsync<GameObject>("RoR2/Base/Commando/CommandoBody.prefab").WaitForCompletion();
            //var commandoSkins = SkinCatalog.FindSkinsForBody(BodyCatalog.FindBodyIndex("CommandoBody"));
            //var commandoMainSkin = commandoSkins[0];
            //var commandoMat = commandoMainSkin.rendererInfos[0].defaultMaterial;

            var commandoMat = Addressables.LoadAssetAsync<Material>("RoR2/Base/Commando/matCommandoDualies.mat").WaitForCompletion();

            meshRenderer.SetMaterial(commandoMat);
            return pod;
        }

        public static SkillDef CreateSkillDef(string TokenPrefix)
        {
            var mySkillDef = ScriptableObject.CreateInstance<SkillDef>();
            //mySkillDef.activationState = null;
            //mySkillDef.icon = SurvivorSkillLocator.special.skillDef.icon;
            mySkillDef.skillName = TokenPrefix;
            mySkillDef.skillNameToken = $"{TokenPrefix}_NAME";
            mySkillDef.skillDescriptionToken = $"{TokenPrefix}_DESC";
            (mySkillDef as ScriptableObject).name = mySkillDef.skillName;
            mySkillDef.keywordTokens = new string[]{};
            return mySkillDef;
        }

        public static SkillDef CreateDefaultSkillDef()
        {
            var mySkillDef = ScriptableObject.CreateInstance<SkillDef>();
            //mySkillDef.activationState = null;
            //mySkillDef.icon = SurvivorSkillLocator.special.skillDef.icon;
            mySkillDef.skillName = "PODNONE";
            mySkillDef.skillNameToken = $"None";
            mySkillDef.skillDescriptionToken = $"Your character's original pod.";
            (mySkillDef as ScriptableObject).name = mySkillDef.skillName;
            mySkillDef.keywordTokens = new string[]{};
            return mySkillDef;
        }

        public static void AddPods()
        {
            foreach (var pod in new GameObject[]{})
            AlternatePodsPlugin.podName_to_podPrefab.Add(
                pod.TokenPrefix,
                pod.CreatePod()
            );
            AddSkillToSkillFamily(pod.Skill, skillFamily);
        }
        
        private static void AddSkillToSkillFamily(SkillDef skillDef, SkillFamily skillFamily)
        {
            //HG.ArrayUtils.ArrayAppend(ref MainPlugin.ContentPack.entityStateTypes, skillDef.activationState);
            ContentAddition.AddSkillDef(skillDef);

            Array.Resize(ref skillFamily.variants, skillFamily.variants.Length + 1);
            skillFamily.variants[skillFamily.variants.Length - 1] = new SkillFamily.Variant
            {
                skillDef = skillDef,
                unlockableDef = null,
                viewableNode = new ViewablesCatalog.Node(skillDef.skillNameToken, false, null)
            };
        }

        public static void SetupConfig(ConfigFile config)
        {
        }

        public static void CreatePassiveSlot()
        {
            if (bodyPrefab)
            {
                passiveSlot = bodyPrefab.AddComponent<GenericSkill>();
                
                bodyPrefab.AddComponent<AlternatePodsPlugin.PodModGenericSkillPointer>().podmodGenericSkill = passiveSlot;
            }
        }
    }
}